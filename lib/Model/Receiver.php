<?php
/**
 * Receiver
 *
 * PHP version 5
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Toast Cloud SMS
 *
 * Toast Cloud SMS API Specification
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ToastCloud\Model;

use \ArrayAccess;
use \ToastCloud\ObjectSerializer;

/**
 * Receiver Class Doc Comment
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Receiver implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'receiver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receiveMailAddr' => 'string',
        'receiveName' => 'string',
        'receiveType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receiveMailAddr' => 'email',
        'receiveName' => null,
        'receiveType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receiveMailAddr' => 'receiveMailAddr',
        'receiveName' => 'receiveName',
        'receiveType' => 'receiveType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receiveMailAddr' => 'setReceiveMailAddr',
        'receiveName' => 'setReceiveName',
        'receiveType' => 'setReceiveType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receiveMailAddr' => 'getReceiveMailAddr',
        'receiveName' => 'getReceiveName',
        'receiveType' => 'getReceiveType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RECEIVE_TYPE_MRT0 = 'MRT0';
    const RECEIVE_TYPE_MRT1 = 'MRT1';
    const RECEIVE_TYPE_MRT2 = 'MRT2';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiveTypeAllowableValues()
    {
        return [
            self::RECEIVE_TYPE_MRT0,
            self::RECEIVE_TYPE_MRT1,
            self::RECEIVE_TYPE_MRT2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receiveMailAddr'] = isset($data['receiveMailAddr']) ? $data['receiveMailAddr'] : null;
        $this->container['receiveName'] = isset($data['receiveName']) ? $data['receiveName'] : null;
        $this->container['receiveType'] = isset($data['receiveType']) ? $data['receiveType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receiveMailAddr'] === null) {
            $invalidProperties[] = "'receiveMailAddr' can't be null";
        }
        $allowedValues = $this->getReceiveTypeAllowableValues();
        if (!is_null($this->container['receiveType']) && !in_array($this->container['receiveType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'receiveType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receiveMailAddr
     *
     * @return string
     */
    public function getReceiveMailAddr()
    {
        return $this->container['receiveMailAddr'];
    }

    /**
     * Sets receiveMailAddr
     *
     * @param string $receiveMailAddr 수신자 메일주소
     *
     * @return $this
     */
    public function setReceiveMailAddr($receiveMailAddr)
    {
        $this->container['receiveMailAddr'] = $receiveMailAddr;

        return $this;
    }

    /**
     * Gets receiveName
     *
     * @return string
     */
    public function getReceiveName()
    {
        return $this->container['receiveName'];
    }

    /**
     * Sets receiveName
     *
     * @param string $receiveName 수신자명
     *
     * @return $this
     */
    public function setReceiveName($receiveName)
    {
        $this->container['receiveName'] = $receiveName;

        return $this;
    }

    /**
     * Gets receiveType
     *
     * @return string
     */
    public function getReceiveType()
    {
        return $this->container['receiveType'];
    }

    /**
     * Sets receiveType
     *
     * @param string $receiveType 수신자 타입 (받는 사람, 참조, 숨은 참조 순)
     *
     * @return $this
     */
    public function setReceiveType($receiveType)
    {
        $allowedValues = $this->getReceiveTypeAllowableValues();
        if (!is_null($receiveType) && !in_array($receiveType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'receiveType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receiveType'] = $receiveType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


