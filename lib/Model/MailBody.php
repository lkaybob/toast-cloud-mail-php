<?php
/**
 * MailBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Toast Cloud SMS
 *
 * Toast Cloud SMS API Specification
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ToastCloud\Model;

use \ArrayAccess;
use \ToastCloud\ObjectSerializer;

/**
 * MailBody Class Doc Comment
 *
 * @category Class
 * @package  ToastCloud
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mailBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'senderAddress' => 'string',
        'senderName' => 'string',
        'requestDate' => 'string',
        'title' => 'string',
        'body' => 'string',
        'attachFieldList' => 'int[]',
        'recieverList' => '\ToastCloud\Model\Receiver[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'senderAddress' => 'email',
        'senderName' => null,
        'requestDate' => 'yyyy-MM-dd HH:mm:ss',
        'title' => null,
        'body' => null,
        'attachFieldList' => null,
        'recieverList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'senderAddress' => 'senderAddress',
        'senderName' => 'senderName',
        'requestDate' => 'requestDate',
        'title' => 'title',
        'body' => 'body',
        'attachFieldList' => 'attachFieldList',
        'recieverList' => 'recieverList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'senderAddress' => 'setSenderAddress',
        'senderName' => 'setSenderName',
        'requestDate' => 'setRequestDate',
        'title' => 'setTitle',
        'body' => 'setBody',
        'attachFieldList' => 'setAttachFieldList',
        'recieverList' => 'setRecieverList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'senderAddress' => 'getSenderAddress',
        'senderName' => 'getSenderName',
        'requestDate' => 'getRequestDate',
        'title' => 'getTitle',
        'body' => 'getBody',
        'attachFieldList' => 'getAttachFieldList',
        'recieverList' => 'getRecieverList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['senderAddress'] = isset($data['senderAddress']) ? $data['senderAddress'] : null;
        $this->container['senderName'] = isset($data['senderName']) ? $data['senderName'] : null;
        $this->container['requestDate'] = isset($data['requestDate']) ? $data['requestDate'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['attachFieldList'] = isset($data['attachFieldList']) ? $data['attachFieldList'] : null;
        $this->container['recieverList'] = isset($data['recieverList']) ? $data['recieverList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['senderAddress'] === null) {
            $invalidProperties[] = "'senderAddress' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['recieverList'] === null) {
            $invalidProperties[] = "'recieverList' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets senderAddress
     *
     * @return string
     */
    public function getSenderAddress()
    {
        return $this->container['senderAddress'];
    }

    /**
     * Sets senderAddress
     *
     * @param string $senderAddress 발신자 메일주소
     *
     * @return $this
     */
    public function setSenderAddress($senderAddress)
    {
        $this->container['senderAddress'] = $senderAddress;

        return $this;
    }

    /**
     * Gets senderName
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['senderName'];
    }

    /**
     * Sets senderName
     *
     * @param string $senderName 발신자 이름 (메일 목록에서 보이는 이름)
     *
     * @return $this
     */
    public function setSenderName($senderName)
    {
        $this->container['senderName'] = $senderName;

        return $this;
    }

    /**
     * Gets requestDate
     *
     * @return string
     */
    public function getRequestDate()
    {
        return $this->container['requestDate'];
    }

    /**
     * Sets requestDate
     *
     * @param string $requestDate requestDate
     *
     * @return $this
     */
    public function setRequestDate($requestDate)
    {
        $this->container['requestDate'] = $requestDate;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 메일의 제목
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body 메일 내용
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets attachFieldList
     *
     * @return int[]
     */
    public function getAttachFieldList()
    {
        return $this->container['attachFieldList'];
    }

    /**
     * Sets attachFieldList
     *
     * @param int[] $attachFieldList attachFieldList
     *
     * @return $this
     */
    public function setAttachFieldList($attachFieldList)
    {
        $this->container['attachFieldList'] = $attachFieldList;

        return $this;
    }

    /**
     * Gets recieverList
     *
     * @return \ToastCloud\Model\Receiver[]
     */
    public function getRecieverList()
    {
        return $this->container['recieverList'];
    }

    /**
     * Sets recieverList
     *
     * @param \ToastCloud\Model\Receiver[] $recieverList 수신자 목록 (최대 1000명까지)
     *
     * @return $this
     */
    public function setRecieverList($recieverList)
    {
        $this->container['recieverList'] = $recieverList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


